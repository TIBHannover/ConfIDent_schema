type AcademicEvent
  {
    startDate: Datetime!
    endDate: Datetime!
    eventStatus: EventStatus!
    inSeries: AcademicEventSeries
    eventFormat: EventFormatSpecification
    atLocation: Location
    deadlines: [Deadline]
    relatedTo: [ProcessRelation]
    ordinal: Integer
    eventMode: EventMode
    id: Uriorcurie!
    name: ProcessName!
    landingPage: Uri
    doi: [DigitalObjectId]
    type: EventType
    organizers: [Organizer]
    academicFields: [AcademicField]
    website: Uri
    sponsors: [Sponsor]
    publications: [Publication]
    externalIds: [ExternalIdentifier]
    topics: [String]
    metrics: [Metric]
    contextInfo: Context
    gndId: [DblpId]
    wikicfpId: [WikiCfpId]
    wikidataId: [WikidataId]
    dpblId: [DblpId]
  }

type AcademicEventSeries
  {
    type: String
    seriesOf: AcademicEvent
    id: Uriorcurie!
    name: ProcessName!
    landingPage: Uri
    doi: [DigitalObjectId]
    organizers: [Organizer]
    academicFields: [AcademicField]
    website: Uri
    sponsors: [Sponsor]
    publications: [Publication]
    topics: [String]
    metrics: [Metric]
    contextInfo: Context
    externalIds: [ExternalIdentifier]
    gndId: [DblpId]
    wikicfpId: [WikiCfpId]
    wikidataId: [WikidataId]
    dpblId: [DblpId]
  }

type AcademicField implements SchemaBasedThing
  {
    value: String!
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type Attendee
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type City implements NamedThing
  {
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type CommitteeChair
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
    contact: ContactPerson
  }

type CommitteeMember
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
    contact: ContactPerson
  }

type ConfIDentRecords
  {
    events: [AcademicEvent]
    series: [AcademicEventSeries]
  }

type ContactPerson
  {
    type: String
    name: String
    externalIds: [ExternalIdentifier]
    contact: ContactPerson
    email: String
    telephone: String
    id: Uriorcurie!
  }

type Context
  {
    text: String
    licenseStr: String
    licenseUrl: Uriorcurie
  }

type Contributor implements NamedThing
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type Country implements NamedThing
  {
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type DblpId
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type Deadline
  {
    type: DeadlineType!
    deadlineDate: Datetime!
    deadlineOther: String
  }

type DigitalObjectId
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type EventFormatSpecification
  {
    specifiedAs: String!
  }

type ExternalIdentifier implements SchemaBasedThing
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type GndId
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type KeynoteSpeaker
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type Location
  {
    city: City
    country: Country
    region: Region
    venue: Venue
    lattitude: Float
    longitude: Float
    meetingUrl: Uriorcurie
  }

type Metric
  {
    type: MetricType
    intValue: Integer
    strValue: String
    rateValue: Float
    truthValue: Boolean
    description: String
  }

type Moderator
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

interface NamedThing
  {
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type Organizer
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
    contact: ContactPerson
  }

type PlannedProcess implements NamedThing
  {
    type: String
    doi: [DigitalObjectId]
    landingPage: Uri
    organizers: [Organizer]
    academicFields: [AcademicField]
    website: Uri
    sponsors: [Sponsor]
    publications: [String]
    wikidataId: [WikidataId]
    wikicfpId: [WikiCfpId]
    dpblId: [DblpId]
    gndId: [GndId]
    topics: [String]
    metrics: [Metric]
    contextInfo: Context
    id: Uriorcurie!
    name: ProcessName!
    externalIds: [ExternalIdentifier]
  }

type Presenter
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type ProcessName
  {
    officialName: String!
    acronym: String
    formerName: String
    translatedName: [String]
    aliases: [String]
  }

type ProcessRelation
  {
    type: RelationType
  }

type Publication implements NamedThing
  {
    doi: [DigitalObjectId]
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type Region implements NamedThing
  {
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type Reviewer
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

interface SchemaBasedThing
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type Sponsor
  {
    type: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type TibkatId
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type Venue implements NamedThing
  {
    street: String
    zipCode: String
    id: Uriorcurie!
    name: String
    externalIds: [ExternalIdentifier]
  }

type WikiCfpId
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

type WikidataId
  {
    value: String
    schemaName: String
    schemaBaseUri: Uriorcurie
  }

